name: Build, Push, and Deploy FastAPI Docker Images

on:
  push:
    branches: [release]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the GitHub repository
      - uses: actions/checkout@v3

      - name: Set up environment variables
        run: |
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> $GITHUB_ENV
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> $GITHUB_ENV

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11" # set python version

      # Install dependencies
      - name: Install dependencies
        run: |
          cd chatbot-service/server 
          pip install -r requirements.txt

      # Run tests
      - name: Run tests
        run: |
          cd chatbot-service/server  
          pytest

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Checkout the code from the GitHub repository
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up environment variables
        run: |
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> ./chatbot-service/server/.env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >>  ./chatbot-service/server/.env

      # Build the chatbot Docker image
      - name: Build the Chatbot Docker image
        run: |
          docker build \
          --build-arg  "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" \
          --build-arg  "MONGODB_URI=${{ secrets.MONGODB_URI }}" \
          -t '${{secrets.DOCKER_LOGIN}}'/chatbot-service:'latest'  ./chatbot-service/server

      # Build the server Docker image
      - name: Build the Server Docker image
        run: |
          docker build -t '${{secrets.DOCKER_LOGIN}}'/server-service:'latest'  ./server

      # Login to Docker Hub
      - name: Login to Docker Hub
        run: |
          docker login --username '${{secrets.DOCKER_LOGIN}}' --password '${{secrets.DOCKER_PASSWORD}}'

      # Push the chatbot image to Docker Hub
      - name: Push the Chatbot Docker image
        run: |
          docker push '${{secrets.DOCKER_LOGIN}}'/chatbot-service:latest

      # Push the server image to Docker Hub
      - name: Push the Server Docker image
        run: |
          docker push '${{secrets.DOCKER_LOGIN}}'/server-service:latest

  deploy_chatbot_server:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Deploy to EC2
      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.CHATBOT_SERVICE_HOST}}
          username: ${{secrets.CHATBOT_SERVICE_USERNAME}}
          key: ${{secrets.CHATBOT_SERVICE_SSH_KEY}}
          port: 22
          script: |
            sudo docker login -u "${{secrets.DOCKER_LOGIN}}" -p "${{secrets.DOCKER_PASSWORD}}"
            sudo docker pull '${{secrets.DOCKER_LOGIN}}'/chatbot-service:latest
            sudo docker stop chatbot-service-container || true
            sudo docker rm chatbot-service-container || true
            sudo docker run -d --name chatbot-service-container -p 8000:8000 \
            -e GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
            -e MONGODB_URI=${{ secrets.MONGODB_URI }} \
            ${{ secrets.DOCKER_LOGIN }}/chatbot-service:latest

  deploy_server_service:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Deploy to EC2
      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.SERVER_SERVICE_HOST}}
          username: ${{secrets.SERVER_SERVICE_USERNAME}}
          key: ${{secrets.SERVER_SERVICE_SSH_KEY}}
          port: 22
          script: |
            sudo docker login -u "${{secrets.DOCKER_LOGIN}}" -p "${{secrets.DOCKER_PASSWORD}}"
            sudo docker pull '${{secrets.DOCKER_LOGIN}}'/server-service:latest
            sudo docker stop server-service-container || true
            sudo docker rm server-service-container || true
            sudo docker run -d --name server-service-container -p 8000:8000 \
            ${{ secrets.DOCKER_LOGIN }}/server-service:latest
